generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum RequestType {
  PICKUP
  SCANNING
  RETRIEVAL
  SHREDDING
}

enum FileType {
  BOX
  FILE
  OTHER
}

enum RetrievalMethod {
  DELIVERY
  PICKUP
  OTHER
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum LocationType {
  ON_SITE
  OFF_SITE
}

model User {
  id                String      @id @default(cuid())
  name              String
  email             String      @unique
  accounts          Account[]
  role              Role        @default(USER)
  emailVerified     DateTime?
  image             String?
  password          String
  department        String?
  company           String?
  warehouseId       String?
  assignedWarehouse Warehouse?  @relation("AssignedWarehouse", fields: [warehouseId], references: [id], onDelete: SetNull)
  managedWarehouses Warehouse[] @relation("WarehouseAdmin")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  requests          Request[]
}

model Warehouse {
  id            String    @id @default(cuid())
  name          String    @unique
  location      String
  adminId       String
  admin         User      @relation("WarehouseAdmin", fields: [adminId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  assignedUsers User[]    @relation("AssignedWarehouse")
  requests      Request[]
}

model Request {
  id               String            @id @default(cuid())
  type             RequestType
  status           RequestStatus     @default(PENDING)
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  warehouseId      String
  warehouse        Warehouse         @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  scheduledDate    DateTime
  scheduledTime    String
  contactPerson    String?
  remarks          String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  scanDetails      ScanDetails?
  retrievalDetails RetrievalDetails?
  shredDetails     ShredDetails?
}

model ScanDetails {
  id         String        @id @default(cuid())
  requestId  String        @unique
  request    Request       @relation(fields: [requestId], references: [id], onDelete: Cascade)
  status     RequestStatus @default(PENDING)
  totalPages Int
  location   LocationType
  scanDate   DateTime?
  remarks    String?
}

model RetrievalDetails {
  id              String          @id @default(cuid())
  requestId       String          @unique
  request         Request         @relation(fields: [requestId], references: [id], onDelete: Cascade)
  fileType        FileType
  retrievalMethod RetrievalMethod
  department      String?
  boxName         String?
  deliveryDate    DateTime?
  remarks         String?
}

model ShredDetails {
  id                String        @id @default(cuid())
  requestId         String        @unique
  request           Request       @relation(fields: [requestId], references: [id], onDelete: Cascade)
  status            RequestStatus @default(PENDING)
  location          LocationType
  shredDate         DateTime?
  remarks           String?
  certificateIssued Boolean       @default(false)
}

model Account {
  id            String  @id @default(cuid())
  userId        String
  isActive      Boolean @default(true)
  access_token  String?
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String?
  session_state String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@unique([provider, providerAccountId])
}

model verificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model passwordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
